<?php

namespace DoctrineORMModule\Proxy\__CG__\RequirementsManager\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Project extends \RequirementsManager\Entity\Project implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'id', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'name', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'description', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'user_id', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'created_on', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'updated_on', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'version', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'users', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'modules', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'priority', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'state', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'soft_delete');
        }

        return array('__isInitialized__', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'id', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'name', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'description', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'user_id', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'created_on', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'updated_on', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'version', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'users', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'modules', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'priority', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'state', '' . "\0" . 'RequirementsManager\\Entity\\Project' . "\0" . 'soft_delete');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Project $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', array());

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId($user_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', array($user_id));

        return parent::setUserId($user_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedOn', array());

        return parent::getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedOn($created_on)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedOn', array($created_on));

        return parent::setCreatedOn($created_on);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', array());

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', array($version));

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', array());

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsers($users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsers', array($users));

        return parent::setUsers($users);
    }

    /**
     * {@inheritDoc}
     */
    public function addUser($group)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', array($group));

        return parent::addUser($group);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser($group)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', array($group));

        return parent::removeUser($group);
    }

    /**
     * {@inheritDoc}
     */
    public function getModules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModules', array());

        return parent::getModules();
    }

    /**
     * {@inheritDoc}
     */
    public function setModules($modules)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModules', array($modules));

        return parent::setModules($modules);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', array());

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority($priority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', array($priority));

        return parent::setPriority($priority);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', array());

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', array($state));

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getSoftDelete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSoftDelete', array());

        return parent::getSoftDelete();
    }

    /**
     * {@inheritDoc}
     */
    public function setSoftDelete($soft_delete)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSoftDelete', array($soft_delete));

        return parent::setSoftDelete($soft_delete);
    }

}
